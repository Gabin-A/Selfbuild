import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error
from xgboost import XGBRegressor

# Load your dataset
df = pd.read_csv('SGclean.csv')  # Ensure SGclean.csv is in your local repo

# Clean column names
df.columns = df.columns.str.lower().str.replace(" ", "_")

# Create target: price per room
df["price_per_room"] = df["rent"] / df["number_of_rooms"]

# Handle missing values
df["square_meter_missing"] = df["square_meter"].isna().astype(int)
df["square_meter"] = df["square_meter"].fillna(df["square_meter"].median())

# Select features
features = ["number_of_rooms", "square_meter", "place_type", "zip_city", "rent", "square_meter_missing"]
X = df[features]
y = df["price_per_room"]

# One-hot encode categorical columns
X_encoded = pd.get_dummies(X, columns=["place_type", "zip_city"], drop_first=True)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Train model
model = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
model.fit(X_train, y_train)

# Evaluate model
y_pred = model.predict(X_test)
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f"Model RMSE: {rmse:.2f} CHF per room")

# Save model
model.save_model("room_price_model.json")
print("Model saved as room_price_model.json")
